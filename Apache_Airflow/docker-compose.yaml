version: '3.8'

x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.5}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
    AIRFLOW__WEBSERVER__AUTHENTICATE: 'true'
    AIRFLOW__WEBSERVER__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: "clickhouse-driver==0.2.6 psycopg2-binary pandas"
    
    # Обновленные настройки ClickHouse
    CLICKHOUSE_HOST: "host.docker.internal"
    CLICKHOUSE_PORT: "18123"
    CLICKHOUSE_HTTP_PORT: "18123"
    CLICKHOUSE_NATIVE_PORT: "19000"
    CLICKHOUSE_DB: "ios_click_db"
    CLICKHOUSE_USER: "admin"
    CLICKHOUSE_PASSWORD: "admin_user_1234"
    CLICKHOUSE_SECURE: "false"
    
    # Настройки PostgreSQL (оставляем как есть)
    POSTGRES_EXTERNAL_HOST: "host.docker.internal"
    POSTGRES_EXTERNAL_PORT: "5432"
    POSTGRES_EXTERNAL_DB: "ios_ystu_db"
    POSTGRES_EXTERNAL_SCHEMA: "sandbox"
    POSTGRES_EXTERNAL_USER: "admin"
    POSTGRES_EXTERNAL_PASSWORD: "admin_user_1234"
    
  volumes:
    - C:/Users/Danila/airflow-docker/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - //var/run/docker.sock:/var/run/docker.sock
  networks:
    - airflow-network
  extra_hosts:
    - "host.docker.internal:host-gateway"
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - airflow-network
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        echo "Initializing Airflow..."
        airflow db init
        airflow users create \
            --username danila \
            --password 1234 \
            --firstname Danila \
            --lastname Maslov \
            --role Admin \
            --email maslovd4@yandex.ru
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres-db-volume:

networks:
  airflow-network:
    driver: bridge